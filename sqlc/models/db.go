// Code generated by sqlc. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.cancelOrderStmt, err = db.PrepareContext(ctx, cancelOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CancelOrder: %w", err)
	}
	if q.createItemStmt, err = db.PrepareContext(ctx, createItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItem: %w", err)
	}
	if q.createOrderStmt, err = db.PrepareContext(ctx, createOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrder: %w", err)
	}
	if q.deactivateOrderStmt, err = db.PrepareContext(ctx, deactivateOrder); err != nil {
		return nil, fmt.Errorf("error preparing query DeactivateOrder: %w", err)
	}
	if q.deleteItemByUserStmt, err = db.PrepareContext(ctx, deleteItemByUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemByUser: %w", err)
	}
	if q.getActiveOrderStmt, err = db.PrepareContext(ctx, getActiveOrder); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveOrder: %w", err)
	}
	if q.getItemStmt, err = db.PrepareContext(ctx, getItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetItem: %w", err)
	}
	if q.getItemsByOrderIDStmt, err = db.PrepareContext(ctx, getItemsByOrderID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemsByOrderID: %w", err)
	}
	if q.getOrderByIDStmt, err = db.PrepareContext(ctx, getOrderByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrderByID: %w", err)
	}
	if q.getUserItemsStmt, err = db.PrepareContext(ctx, getUserItems); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserItems: %w", err)
	}
	if q.updateExpiryStmt, err = db.PrepareContext(ctx, updateExpiry); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExpiry: %w", err)
	}
	if q.updateItemQuantityStmt, err = db.PrepareContext(ctx, updateItemQuantity); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemQuantity: %w", err)
	}
	if q.updateReminderStmt, err = db.PrepareContext(ctx, updateReminder); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReminder: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.cancelOrderStmt != nil {
		if cerr := q.cancelOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cancelOrderStmt: %w", cerr)
		}
	}
	if q.createItemStmt != nil {
		if cerr := q.createItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemStmt: %w", cerr)
		}
	}
	if q.createOrderStmt != nil {
		if cerr := q.createOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderStmt: %w", cerr)
		}
	}
	if q.deactivateOrderStmt != nil {
		if cerr := q.deactivateOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deactivateOrderStmt: %w", cerr)
		}
	}
	if q.deleteItemByUserStmt != nil {
		if cerr := q.deleteItemByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemByUserStmt: %w", cerr)
		}
	}
	if q.getActiveOrderStmt != nil {
		if cerr := q.getActiveOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveOrderStmt: %w", cerr)
		}
	}
	if q.getItemStmt != nil {
		if cerr := q.getItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemStmt: %w", cerr)
		}
	}
	if q.getItemsByOrderIDStmt != nil {
		if cerr := q.getItemsByOrderIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemsByOrderIDStmt: %w", cerr)
		}
	}
	if q.getOrderByIDStmt != nil {
		if cerr := q.getOrderByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderByIDStmt: %w", cerr)
		}
	}
	if q.getUserItemsStmt != nil {
		if cerr := q.getUserItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserItemsStmt: %w", cerr)
		}
	}
	if q.updateExpiryStmt != nil {
		if cerr := q.updateExpiryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExpiryStmt: %w", cerr)
		}
	}
	if q.updateItemQuantityStmt != nil {
		if cerr := q.updateItemQuantityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemQuantityStmt: %w", cerr)
		}
	}
	if q.updateReminderStmt != nil {
		if cerr := q.updateReminderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReminderStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	cancelOrderStmt        *sql.Stmt
	createItemStmt         *sql.Stmt
	createOrderStmt        *sql.Stmt
	deactivateOrderStmt    *sql.Stmt
	deleteItemByUserStmt   *sql.Stmt
	getActiveOrderStmt     *sql.Stmt
	getItemStmt            *sql.Stmt
	getItemsByOrderIDStmt  *sql.Stmt
	getOrderByIDStmt       *sql.Stmt
	getUserItemsStmt       *sql.Stmt
	updateExpiryStmt       *sql.Stmt
	updateItemQuantityStmt *sql.Stmt
	updateReminderStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		cancelOrderStmt:        q.cancelOrderStmt,
		createItemStmt:         q.createItemStmt,
		createOrderStmt:        q.createOrderStmt,
		deactivateOrderStmt:    q.deactivateOrderStmt,
		deleteItemByUserStmt:   q.deleteItemByUserStmt,
		getActiveOrderStmt:     q.getActiveOrderStmt,
		getItemStmt:            q.getItemStmt,
		getItemsByOrderIDStmt:  q.getItemsByOrderIDStmt,
		getOrderByIDStmt:       q.getOrderByIDStmt,
		getUserItemsStmt:       q.getUserItemsStmt,
		updateExpiryStmt:       q.updateExpiryStmt,
		updateItemQuantityStmt: q.updateItemQuantityStmt,
		updateReminderStmt:     q.updateReminderStmt,
	}
}
