// Code generated by sqlc. DO NOT EDIT.
// source: items.sql

package models

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (order_id, quantity, name, user_id, user_name)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, user_name, order_id, quantity, name
`

type CreateItemParams struct {
	OrderID  int32  `json:"order_id"`
	Quantity int32  `json:"quantity"`
	Name     string `json:"name"`
	UserID   int32  `json:"user_id"`
	UserName string `json:"user_name"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.queryRow(ctx, q.createItemStmt, createItem,
		arg.OrderID,
		arg.Quantity,
		arg.Name,
		arg.UserID,
		arg.UserName,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.OrderID,
		&i.Quantity,
		&i.Name,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT id, user_id, user_name, order_id, quantity, name FROM items
WHERE order_id = $1
AND user_id = $2
AND LOWER(name) = LOWER($3)
`

type GetItemParams struct {
	OrderID int32  `json:"order_id"`
	UserID  int32  `json:"user_id"`
	Lower   string `json:"lower"`
}

func (q *Queries) GetItem(ctx context.Context, arg GetItemParams) (Item, error) {
	row := q.queryRow(ctx, q.getItemStmt, getItem, arg.OrderID, arg.UserID, arg.Lower)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.OrderID,
		&i.Quantity,
		&i.Name,
	)
	return i, err
}

const getItemsByOrderID = `-- name: GetItemsByOrderID :many
SELECT id, user_id, user_name, order_id, quantity, name FROM items
WHERE order_id = $1
`

func (q *Queries) GetItemsByOrderID(ctx context.Context, orderID int32) ([]Item, error) {
	rows, err := q.query(ctx, q.getItemsByOrderIDStmt, getItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserName,
			&i.OrderID,
			&i.Quantity,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemQuantity = `-- name: UpdateItemQuantity :one
UPDATE items
SET quantity = $4
WHERE order_id = $1
AND user_id = $2
AND LOWER(name) = LOWER($3)
RETURNING id, user_id, user_name, order_id, quantity, name
`

type UpdateItemQuantityParams struct {
	OrderID  int32  `json:"order_id"`
	UserID   int32  `json:"user_id"`
	Lower    string `json:"lower"`
	Quantity int32  `json:"quantity"`
}

func (q *Queries) UpdateItemQuantity(ctx context.Context, arg UpdateItemQuantityParams) (Item, error) {
	row := q.queryRow(ctx, q.updateItemQuantityStmt, updateItemQuantity,
		arg.OrderID,
		arg.UserID,
		arg.Lower,
		arg.Quantity,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.OrderID,
		&i.Quantity,
		&i.Name,
	)
	return i, err
}
